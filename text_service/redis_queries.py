"""
Redis utility functions for querying task statuses and other fields.
"""

import asyncio
import redis.asyncio as redis
from typing import List, Dict, Set
from config import REDIS_URL, logger


async def get_all_task_statuses() -> List[str]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ª—è 'status' –∏–∑ –≤—Å–µ—Ö –∑–∞–¥–∞—á –≤ Redis.
    
    Returns:
        List[str]: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á
    """
    redis_client = redis.from_url(REDIS_URL, decode_responses=True)
    
    try:
        statuses = []
        
        # –ú–µ—Ç–æ–¥ 1: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–ª—é—á–µ–π –∑–∞–¥–∞—á
        async for key in redis_client.scan_iter(match="task:*"):
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ status –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
            status = redis_client.hget(key, "status")
            if status:
                statuses.append(status)
        
        logger.info(f"Found {len(statuses)} task statuses")
        return statuses
        
    except Exception as e:
        logger.error(f"Error getting task statuses: {e}")
        return []
    finally:
        await redis_client.close()


async def get_unique_task_statuses() -> Set[str]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á.
    
    Returns:
        Set[str]: –ú–Ω–æ–∂–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
    """
    statuses = await get_all_task_statuses()
    return set(statuses)


async def get_status_distribution() -> Dict[str, int]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á (—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –≤ –∫–∞–∂–¥–æ–º —Å—Ç–∞—Ç—É—Å–µ).
    
    Returns:
        Dict[str, int]: –°–ª–æ–≤–∞—Ä—å {—Å—Ç–∞—Ç—É—Å: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ}
    """
    statuses = await get_all_task_statuses()
    distribution = {}
    
    for status in statuses:
        distribution[status] = distribution.get(status, 0) + 1
    
    return distribution


async def get_tasks_by_status(target_status: str) -> List[Dict]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º.
    
    Args:
        target_status: –ò—Å–∫–æ–º—ã–π —Å—Ç–∞—Ç—É—Å
        
    Returns:
        List[Dict]: –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
    """
    redis_client = redis.from_url(REDIS_URL, decode_responses=True)
    
    try:
        tasks = []
        
        async for key in redis_client.scan_iter(match="task:*"):
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            task_data = redis_client.hgetall(key)
            
            if task_data.get("status") == target_status:
                tasks.append(task_data)
        
        logger.info(f"Found {len(tasks)} tasks with status '{target_status}'")
        return tasks
        
    except Exception as e:
        logger.error(f"Error getting tasks by status: {e}")
        return []
    finally:
        await redis_client.close()


async def get_all_field_values(field_name: str) -> List[str]:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ª—é–±–æ–≥–æ –ø–æ–ª—è.
    
    Args:
        field_name: –ò–º—è –ø–æ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'status', 'service', 'name')
        
    Returns:
        List[str]: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è
    """
    redis_client = redis.from_url(REDIS_URL, decode_responses=True)
    
    try:
        values = []
        
        async for key in redis_client.scan_iter(match="task:*"):
            value = await redis_client.hget(key, field_name)
            if value:
                values.append(value)
        
        logger.info(f"Found {len(values)} values for field '{field_name}'")
        return values
        
    except Exception as e:
        logger.error(f"Error getting field values: {e}")
        return []
    finally:
        await redis_client.close()


async def get_bulk_field_values(field_names: List[str]) -> Dict[str, List[str]]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª–µ–π –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º (—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ).
    
    Args:
        field_names: –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –ø–æ–ª–µ–π
        
    Returns:
        Dict[str, List[str]]: –°–ª–æ–≤–∞—Ä—å {–ø–æ–ª–µ: [–∑–Ω–∞—á–µ–Ω–∏—è]}
    """
    redis_client = redis.from_url(REDIS_URL, decode_responses=True)
    
    try:
        result = {field: [] for field in field_names}
        
        async for key in redis_client.scan_iter(match="task:*"):
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–æ–ª—è –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
            values = await redis_client.hmget(key, *field_names)
            
            for i, field in enumerate(field_names):
                if values[i]:  # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ None
                    result[field].append(values[i])
        
        for field in field_names:
            logger.info(f"Found {len(result[field])} values for field '{field}'")
        
        return result
        
    except Exception as e:
        logger.error(f"Error getting bulk field values: {e}")
        return {field: [] for field in field_names}
    finally:
        await redis_client.close()


# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Redis Lua —Å–∫—Ä–∏–ø—Ç–æ–≤ –¥–ª—è –±–æ–ª—å—à–µ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

LUA_GET_ALL_STATUSES = """
local keys = redis.call('KEYS', 'task:*')
local statuses = {}
for i=1,#keys do
    local status = redis.call('HGET', keys[i], 'status')
    if status then
        table.insert(statuses, status)
    end
end
return statuses
"""

async def get_all_statuses_lua() -> List[str]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã —Å –ø–æ–º–æ—â—å—é Lua —Å–∫—Ä–∏–ø—Ç–∞ (–±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö).
    
    Returns:
        List[str]: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
    """
    redis_client = redis.from_url(REDIS_URL, decode_responses=True)
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º Lua —Å–∫—Ä–∏–ø—Ç
        statuses = await redis_client.eval(LUA_GET_ALL_STATUSES, 0)
        logger.info(f"Found {len(statuses)} statuses using Lua script")
        return statuses
        
    except Exception as e:
        logger.error(f"Error with Lua script: {e}")
        return []
    finally:
        await redis_client.close()


async def demo_redis_queries():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤."""
    print("üîç Redis Task Status Queries Demo\n")
    
    # 1. –í—Å–µ —Å—Ç–∞—Ç—É—Å—ã
    print("1. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤:")
    statuses = await get_all_task_statuses()
    print(f"   –ù–∞–π–¥–µ–Ω–æ {len(statuses)} —Å—Ç–∞—Ç—É—Å–æ–≤: {statuses[:5]}{'...' if len(statuses) > 5 else ''}")
    
    # 2. –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
    print("\n2. –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã:")
    unique_statuses = await get_unique_task_statuses()
    print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ: {sorted(unique_statuses)}")
    
    # 3. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤
    print("\n3. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤:")
    distribution = await get_status_distribution()
    for status, count in sorted(distribution.items()):
        print(f"   {status}: {count} –∑–∞–¥–∞—á")
    
    # 4. –ó–∞–¥–∞—á–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if distribution:
        most_common_status = max(distribution.items(), key=lambda x: x[1])[0]
        print(f"\n4. –ó–∞–¥–∞—á–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{most_common_status}':")
        tasks = await get_tasks_by_status(most_common_status)
        print(f"   –ù–∞–π–¥–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á")
        if tasks:
            first_task = tasks[0]
            print(f"   –ü—Ä–∏–º–µ—Ä: ID={first_task.get('id', 'N/A')}, Name={first_task.get('name', 'N/A')}")
    
    # 5. –ó–Ω–∞—á–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª–µ–π
    print("\n5. –ó–Ω–∞—á–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª–µ–π:")
    bulk_data = await get_bulk_field_values(['status', 'service', 'name'])
    for field, values in bulk_data.items():
        unique_values = set(values)
        print(f"   {field}: {len(values)} –≤—Å–µ–≥–æ, {len(unique_values)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö")
        print(f"     –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ: {sorted(unique_values)}")
    
    # 6. Lua —Å–∫—Ä–∏–ø—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
    print("\n6. Lua —Å–∫—Ä–∏–ø—Ç –º–µ—Ç–æ–¥:")
    lua_statuses = await get_all_statuses_lua()
    print(f"   Lua —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {len(lua_statuses)} —Å—Ç–∞—Ç—É—Å–æ–≤")


if __name__ == "__main__":
    asyncio.run(demo_redis_queries())
